<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-23T17:31:59+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">伊東研究室</title><subtitle>日本大学 生産工学部 数理情報工学科 可視化・数値解析を中心に研究．</subtitle><author><name>伊東拓(教授)</name></author><entry><title type="html">ジオメトリシェーダを学ぶ(基礎中の基礎編)</title><link href="http://localhost:4000/blog/geometry-shader/" rel="alternate" type="text/html" title="ジオメトリシェーダを学ぶ(基礎中の基礎編)" /><published>2021-10-28T19:34:30+00:00</published><updated>2021-10-28T19:34:30+00:00</updated><id>http://localhost:4000/blog/geometry-shader</id><content type="html" xml:base="http://localhost:4000/blog/geometry-shader/"><![CDATA[<p><del>需要など知らぬ。ただの自己満足</del><br />
ここではUnityを使用したジオメトリシェーダについて解説していき、読んでくれる人がオリジナルのシェーダを記述できるまでにしていく。<del>していきたい</del><br />
なお、今回のチュートリアルは、ジオメトリシェーダというよりは、シェーダ全体の解説なのであしからず。(見栄えがいいのは次回！</p>

<h3 id="ジオメトリシェーダとは">ジオメトリシェーダとは</h3>
<p>バーテックスシェーダとフラグメント(ピクセル)シェーダの中間に位置するシェーダ。 バーテックスシェーダでは頂点ごとにシェーダが適用され、フラグメントシェーダではピクセル単位でシェーダが適用される。これに対してジオメトリシェーダは、ポリゴン単位でシェーダが適用され、頂点座標を変更したり、頂点そのものを削除もしくは増加させることができる。 例えば三角形のポリゴンが入力として来た際に、それを四角形に変更したり、なんなら立方体にしてしまったりすることができる。(GPUパーティクルはこれを利用している)</p>

<p><a href="https://yttm-work.jp/shader/shader_0002.html">レンダリングパイプライン</a></p>

<h3 id="ジオメトリシェーダを使ってみる">ジオメトリシェーダを使ってみる</h3>

<p>とりあえず何もしないシェーダを作ってみます。<br />
Unityを起動したら適当な名前でプロジェクトを作成しましょう。作成できたら、まずはヒエラルキーでcubeを
置きます。</p>

<p>cubeが置けたら、今度はプロジェクトタブで、右クリック&gt;Create&gt;Materialを選択します。<br />
Materialを適当な名前に変更したら、今度はshaderファイルを作成していきます。プロジェクトタブで右クリック&gt;Create&gt;
Shader&gt;Unlit Shaderを選択します。</p>

<p>Shaderが作成できたら、名前を適当な名前に変更し、ファイルを先ほど作成したmaterialにドラッグ＆ドロップしましょう。
これでマテリアルとシェーダが紐づけされます。最後に、マテリアルをヒエラルキーのcubeにアタッチ（ドラッグ＆ドロップ）すれば、下準備は完了です。<br />
ここからシェーダの中身を書いていきます。</p>

<div class="language-hlsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Unlit/cube"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_MainTex</span> <span class="p">(</span><span class="s">"Texture"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span><span class="o">=</span><span class="s">"Opaque"</span> <span class="p">}</span>
        <span class="n">LOD</span> <span class="mi">100</span>

        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="n">CGPROGRAM</span>
            <span class="cp">#pragma vertex vert   //vert関数がvertexシェーダであることを宣言
</span>            <span class="cp">#pragma fragment frag //frag関数がfragmentシェーダであることを宣言
</span>	    <span class="cp">#pragma geometry geo  //geo関数がgeometyシェーダであることを宣言
</span>
            <span class="cp">#include</span> <span class="cpf">"UnityCG.cginc"</span><span class="cp">
</span>
            <span class="k">struct</span> <span class="n">appdata</span>
            <span class="p">{</span>
                <span class="kt">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="nb">POSITION</span><span class="p">;</span>
                <span class="kt">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="nb">TEXCOORD0</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="k">struct</span> <span class="n">v2f</span>
            <span class="p">{</span>
                <span class="kt">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="nb">TEXCOORD0</span><span class="p">;</span>
                <span class="kt">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="nb">SV_POSITION</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="n">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
            <span class="kt">float4</span> <span class="n">_MainTex_ST</span><span class="p">;</span>

            <span class="n">v2f</span> <span class="n">vert</span> <span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">vertex</span> <span class="o">=</span> <span class="n">UnityObjectToClipPos</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span> <span class="n">_MainTex</span><span class="p">);</span>

                <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
            <span class="p">}</span>

	<span class="err">　　</span><span class="p">[</span><span class="n">maxvertexcount</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
	<span class="err">　　</span><span class="kt">void</span> <span class="n">geo</span><span class="p">(</span><span class="k">triangle</span> <span class="n">v2f</span> <span class="n">input</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="k">inout</span> <span class="kt">TriangleStream</span><span class="o">&lt;</span><span class="n">v2f</span><span class="o">&gt;</span> <span class="n">outStream</span><span class="p">)</span>
	<span class="err">　　</span><span class="p">{</span>
		<span class="n">outStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
		<span class="n">outStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
		<span class="n">outStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
		<span class="n">outStream</span><span class="p">.</span><span class="n">RestartStrip</span><span class="p">();</span>
	<span class="err">　　</span><span class="p">}</span>

            <span class="n">fixed4</span> <span class="n">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>
                <span class="n">fixed4</span> <span class="n">col</span> <span class="o">=</span> <span class="n">fixed4</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
                
                <span class="k">return</span> <span class="n">col</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDCG</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>上記のコードはいわゆる「なにもしない」シェーダです。与えられた入力データに対してMVP行列による座標変換のみを行い、それをそのまま出力としています。（色だけ変えてます）
MVP行列については<a href="http://light11.hatenadiary.com/entry/2019/01/27/160541">シェーダのシェの字も知らない人はまずMVP行列について軽く学ぼう</a> 
で詳しく解説されているので、一読しておくのをおススメします。<br />
MVP行列について理解して頂いた上で、順に上からコードの解説をしていきます。</p>

<h4 id="properties">Properties</h4>
<div class="language-hlsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_MainTex</span> <span class="p">(</span><span class="s">"Texture"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>Propertiesブロックです。Unity公式によると</p>
<blockquote>
  <p>シェーダにより,UnityのMaterialインスペクター 上で,アーティストがセットできるパラメータの一覧を定義できます。シェーダでのPropertiesブロックで定義します。</p>
</blockquote>

<p>つまり、Propertiesブロックで宣言した変数は、Unityのインスペクターから値を直接書き換えることができるようになります。また、マテリアルのインスペクターからアクセスできるということは、C#スクリプトからもアクセスできるため、柔軟なコードが組めるようになります。
Propertiesブロックに宣言できる変数にはいくつか種類があります。 <br />
<strong>例：Float Range</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name ("display name", Range (min, max)) = number
</code></pre></div></div>
<p>float型のプロパティです。インスペクタ上でmin,maxの範囲内でスライドバーが動かせるようになります。<br />
それぞれに入る値は以下のようになっています。
|name|実際に使用する変数名|
|display name|インスペクタ上に表示する名前|
|min,max|Float値|
|number|初期値(Float)|
これ以外にも指定できるプロパティはあるので、適宜こちらの公式ドキュメントを見ておくといいです。<br />
<a href="https://docs.unity3d.com/jp/460/Manual/SL-Properties.html]">ShaderLab文法</a></p>

<p>####SubShader</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SubShader{
    ......
}
SubShader{
    ......
}
</code></pre></div></div>
<p>SubShaderはShaderLabの文法で、Shaderファイル一つにつき必ず一つは必要になります。複数存在する場合、上から実行可能なSubShaderを検索し実行します。<br />
こうして複数に分けることで、ハイエンド向けの処理、ロースペック向けの処理など分けて処理を記述することが可能になります。また、実行可能なシェーダが存在しない場合、”Fall Back”を記述することで別のシェーダから探索します。詳しくは公式ドキュメントの<a href="https://docs.unity3d.com/jp/460/Manual/SL-Fallback.html">Fall Backについて</a>を参照してください。後述するTags,PassはSubShader内に記述します。</p>

<h4 id="tags">Tags</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tags { "RenderType"="Opaque" }
</code></pre></div></div>
<p>Tagsではシェーダがどのタイミングでどのようにレンダリングされるのかを指定します。<br />
RenderTypeで描画方法を、Queueで描画順序を指定します。半透明な見た目のシェーダを作成する場合はレンダータイプを半透明にし、描画順序(優先度)も最後に描画させるために半透明にする必要があります。これも今回の話にはあまり関わってこないので、興味がある方は公式ドキュメントを参照して下さい。
<a href="https://docs.unity3d.com/Manual/SL-SubShaderTags.html">Tags</a></p>

<p>####Pass</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pass{
  ......
}
Pass{
  ......
}
</code></pre></div></div>
<p>頂点シェーダやフラグメントシェーダ、ジオメトリシェーダなどはこのpassブロック内に流れを記述していきます。恐らく初心者のうちはPassを複数書くことはあまりないと思います。Passを増やすことで、例えば1パス目でテクスチャを生成し、2パス目でそれを元にレンダリングを行ったりできます。(モデルに輪郭を出したい時などに使える)  また、一般的にはマルチパスレンダリングやマルチパスシェーダと呼ぶようです。</p>

<h4 id="cgprogram--endcg">CGPROGRAM / ENDCG</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CGPROGRAM
.
.
.
ENDCG
</code></pre></div></div>
<p>この間に描画処理を記述していきます。また、名前の通り、この間の記述にはCg言語を用いります。</p>

<p>####インクルードファイル
前述したCGPROGRAMのすぐ下で”#include “UnityCG.cginc”をしています。こうすることで、汎用的な定義済みの関数にアクセスすることができます。
内臓されているインクルードファイルについては<a href="https://docs.unity3d.com/jp/460/Manual/SL-BuiltinIncludes.html">公式ドキュメント</a>を参照してください。</p>

<h4 id="pragma">#pragma</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  #pragma vertex vert
  #pragma fragment frag
  #pragma geometry geo
</code></pre></div></div>
<p>#pragmaで指定してやることで、コンパイラに対してどの関数が頂点シェーダ、フラグメントシェーダ、ジオメトリシェーダとしてコンパイルするのかを教えてあげます。
今回のコードではvertが頂点シェーダ、fragがフラグメントシェーダ、geoがジオメトリシェーダというわけです。</p>

<p>####appdata, v2f</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct appdata
       {
           float4 vertex : POSITION;
           float2 uv : TEXCOORD0;
       };

struct v2f
       {
           float2 uv : TEXCOORD0;
           float4 vertex : SV_POSITION;
       };
</code></pre></div></div>

<p>appdata,v2fはshaderに対して渡す入力を定義しています。今は構造体として定義していますが、shaderの引数に直接記述することも可能です。<br />
また、それぞれの変数の最後に:POSITION;などと記述されています。</p>
<blockquote>
  <blockquote>
    <p>float4 vertex:POSITION;</p>
  </blockquote>
</blockquote>

<p>これらはセマンティクスと呼ばれ、頂点座標やUV座標などが、プログラム中のどの変数に対応するのかを定義するために使用します。セマンティクスに関しては<a href="https://qiita.com/sune2/items/fa5d50d9ea9bd48761b2">ここのサイト</a>がわかりやすいです。
必要なのはこのセマンティクスなので、構造体自体は好きな名前にすることも可能ですし、中身も自由に変えて大丈夫です。</p>

<p>####uniform</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> sampler2D _MainTex;
 float4 _MainTex_ST;
</code></pre></div></div>
<p>前述した部分のすぐ下に、この2行があると思います。これはuniform変数と呼ばれるもので、Propertiesブロックで宣言した変数を実際のshaderで使用するためのものです。
そのため、Propertiesブロックで宣言した名前と一致させる必要があります。明示的にuniformを変数の直前に記述することも可能です。
また、_MainTex_STというPropertiesブロックでは宣言していないはずのものがあると思います。これはデフォルトで用意されているもののようで、この変数には_MainTexで受け取ったテクスチャのタイリング、オフセットの情報が代入されます。(定義済み関数で使用しているので削除非推奨）</p>

<p>####Vertex Shader(頂点シェーダ)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>v2f vert (appdata v)
{
    v2f o;
    o.vertex = UnityObjectToClipPos(v.vertex);
    o.uv = TRANSFORM_TEX(v.uv, _MainTex);

    return o;
}
</code></pre></div></div>
<p>ようやくシェーダの本体の話になります。まずは一番最初に実行される頂点シェーダについてです。<br />
今回は引数として構造体appdataを受け取っています。これによって頂点シェーダはオブジェクトの頂点情報を獲得したことになります。
```v2f o;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>次に実行されるシェーダに渡すために構造体を宣言しています。
</code></pre></div></div>
<p>o.vertex = UnityObjectToClipPos(v.vertex);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>入力された頂点座標(ローカル）に対してMVP変換したものを出力用データに代入しています。
</code></pre></div></div>
<p>o.uv = TRANSFORM_TEX(v.uv, _MainTex);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>各頂点のUV座標をテクスチャスケール、オフセットを適用した状態で出力用データに代入しています。
</code></pre></div></div>
<p>return o;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>頂点シェーダで加工されたデータは、ジオメトリシェーダが定義されていなければフラグメントシェーダへ、定義されていればジオメトリシェーダに流されます。
今回はジオメトリシェーダを使用しているため、データはここに流れます。  
本来であればジオメトリシェーダに流すデータはv2g(vertex to geometry)などの名前にして、v2fと別にすべきですが、今回は渡されたデータをそのまま出力するだけなので
フラグメントシェーダに渡されるデータ(v2f)と共有で使っています。

####Geometry Shader(ジオメトリシェーダ）
</code></pre></div></div>
<p>[maxvertexcount(3)]
void geo(triangle v2f input[3], inout TriangleStream<v2f> outStream)
{
	outStream.Append(input[0]);
	outStream.Append(input[1]);
	outStream.Append(input[2]);
	outStream.RestartStrip();
}</v2f></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>本題のジオメトリシェーダです。(といっても今回は何もしないものですが)  
ジオメトリシェーダでは下記のように、まず出力する頂点の最大数を定義します。(必須）
</code></pre></div></div>
<p>[maxvertexcount(3)]</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>今回の場合は三角形ポリゴンを受け取って、それをそのまま出力するので最大頂点数は３になります。ですので、三角形ポリゴンを2枚出力するのであれば最大頂点数は6になります。

#####入力
ジオメトリシェーダの入力は
</code></pre></div></div>
<p>triangle v2f input[3]</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>以上のようになっています。
triangle　の部分は受け取る際のプリミティブを指定するのもので、
|プリミティブ型 |説明 |
|point|ポイントリスト|
|line|ラインリストまたはラインストリップ|
|triangle|三角形のリストまたは三角形のストリップ|
|lineadj|隣接関係にあるラインリストまたは隣接関係にあるラインストリップ|
|triangleadj|隣接関係にある三角形リストまたは隣接関係にある三角形ストリップ|  
いくつかのバリエーションがあります。どの単位で加工したいかによって変えていくのがベストだと思います。

#####出力
</code></pre></div></div>
<p>inout TriangleStream<v2f> outStream</v2f></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ジオメトリシェーダでは戻り値がないため、引数として出力用のデータを参照渡しで渡しています。
inoutがその参照渡しを指定する方法のようです。(詳しくはまだ調べていない）
TriangleStream..の部分が出力するポリゴンの形を決定する箇所です。全部で、
|PointStream|点で出力|
|LineStream|エッジで出力|
|TriangleStream|三角形で出力|  

が存在します。データタイプ(v2fの部分)に関しては、フラグメントシェーダの入力用の構造体を指定してあげる必要があります。  
試しにLineStreamで出力した例が以下の画像です。


これにはマルチパスシェーダ(パスを複数書く）を使っているため、画像では正常に色が描画され、その上にワイヤーフレームが表示されています。
単純にLineStreamで出力するとワイヤーフレームのみ表示され、中身は透明なオブジェクトが描画されますが、マルチパスを活用することで様々な応用が利かせられます。

#####ポリゴンの作成

</code></pre></div></div>
<p>outStream.Append(input[0]);
outStream.Append(input[1]);
outStream.Append(input[2]);
outStream.RestartStrip();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>outStream.Append(頂点データ）とすることで一枚のポリゴンに必要な頂点データを流しこむことが出来ます。
今回の例では、inputデータをそのまま三角形ポリゴンの頂点データとして流し込んでいます。
最後にoutStream.RestartStrip()を呼んであげることで、一つのポリゴンとして区切りをつけることができます。
すなわち、これ以降にAppendをすると別の新しいポリゴンの頂点として認識されます。
例によってテキトウコードで試してみた。
  
えぇ…なにこれは…。
頂点法線を正規化せずにそのまま使ったらすごいことに…。  
一応コードのせときます。
</code></pre></div></div>
<p>[maxvertexcount(6)]
void geom(triangle v2f input[3], inout LineStream<v2f> outStream) {
	outStream.Append(input[0]);
	outStream.Append(input[1]);
	outStream.Append(input[2]);
	outStream.RestartStrip();
	input[0].vertex.xyz += input[0].normal.xyz;
	input[1].vertex.xyz += input[1].normal.xyz;
	input[2].vertex.xyz += input[2].normal.xyz;
	outStream.Append(input[0]);
	outStream.Append(input[1]);
	outStream.Append(input[2]);
	outStream.RestartStrip();
}</v2f></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>さすがに例がこれだけじゃいけないので、直近で読みかじっていたスフィアのサンプルの実行結果を載せます。
  

コードは2次配布可能か不明だったのでソース元を紹介しときます。[Demo 82](http://www.shaderslab.com/demo-82---extrude-faces.html)  
とりあえず、これでジオメトリシェーダの紹介は終了です。今回は全体の流れを説明しながらだったので、退屈なものだったと思います。  
次回以降のチュートリアルではよりgeometryに特化したものにしていく予定です。暇があれば頂点シェーダとかもチュートリアルつくります。  
以下フラグメントシェーダのプチ解説

####Flagment Shader(フラグメントシェーダ)
</code></pre></div></div>
<p>fixed4 frag (v2f i) : SV_Target
 {</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  fixed4 col = fixed4(i.uv.x, i.uv.y, 0, 1);
 
  return col; } ``` はい、めっちゃ短いです。 フラグメントシェーダではピクセルに描画する色を返り値としています(めちゃシンプル)   そのため、 ``` fixed4 col = fixed4(i.uv.x, i.uv.y, 0, 1); ``` この部分で色をピクセル単位で色を指定しています。 つまり、上記の式では、UV値をそのままカラー値とすることで(UnityではRGB(0.0 ~1.0),UV値も0.0～1.0)グラデーションを再現しています。
</code></pre></div></div>

<p>####最後に
自分にインプットするためのアウトプットでしたが正直疲れました。(でも楽しかった）<br />
宝くじが当たるくらいの確率で読んでくれる人が表れた時に役にたったらいいな。<br />
あと正直説明不足のとこ多いと思う気がするのでとりあえずマッハで雛形はできたので適宜修正していこうと思います。<br />
以上(燃え尽きた)<br />
第一部　完</p>]]></content><author><name>平山蓮</name></author><category term="blog" /><category term="Shader" /><category term="Unity" /><summary type="html"><![CDATA[需要など知らぬ。ただの自己満足 ここではUnityを使用したジオメトリシェーダについて解説していき、読んでくれる人がオリジナルのシェーダを記述できるまでにしていく。していきたい なお、今回のチュートリアルは、ジオメトリシェーダというよりは、シェーダ全体の解説なのであしからず。(見栄えがいいのは次回！]]></summary></entry><entry><title type="html">論文を読んだり書いたりするときに使うツール</title><link href="http://localhost:4000/blog/hanaoka-reading/" rel="alternate" type="text/html" title="論文を読んだり書いたりするときに使うツール" /><published>2021-01-31T04:00:00+00:00</published><updated>2021-01-31T04:00:00+00:00</updated><id>http://localhost:4000/blog/hanaoka-reading</id><content type="html" xml:base="http://localhost:4000/blog/hanaoka-reading/"><![CDATA[<h2 id="超役立つやつ">超役立つやつ</h2>
<p><a href="https://html-css-javascript.com/n-space-tab/"><strong>改行・空白・タブ削除ツール</strong></a></p>

<p><a href="http://neutron.appl-beam.ibaraki.ac.jp/ohoyamak/index.html"><strong>科学論文に役立つ英語</strong></a></p>

<p><a href="https://readingmonkey.blog.fc2.com/blog-entry-650.html">(英語版）こう言い換えろ→論文に死んでも書いてはいけない言葉３０</a></p>

<p><a href="https://www.jmtranslationservice.com/untitled-c1hwe">JM TRANSLATIONS -英語の論文で役立つ接続表現-</a></p>

<p><a href="http://www.shiga-med.ac.jp/~koyama/eng/eng-beg-intro-obj.html">論文英語ナビ-目的の書き方-</a></p>

<p><a href="http://blog.livedoor.jp/minetan345/archives/51940952.html">On the other hand の言い換え一覧</a></p>

<p><a href="https://www.myu-inc.jp/awsp/AWSP_attention.html">論文を書く際に注意が必要な事項</a></p>]]></content><author><name>花岡佑哉</name></author><category term="blog" /><category term="論文" /><summary type="html"><![CDATA[超役立つやつ 改行・空白・タブ削除ツール]]></summary></entry><entry><title type="html">VIRTUALIZE REALIZE</title><link href="http://localhost:4000/blog/virtualize-realize/" rel="alternate" type="text/html" title="VIRTUALIZE REALIZE" /><published>2020-04-22T04:00:00+00:00</published><updated>2020-04-22T04:00:00+00:00</updated><id>http://localhost:4000/blog/virtualize-realize</id><content type="html" xml:base="http://localhost:4000/blog/virtualize-realize/"><![CDATA[<p>本研究室の2020年度卒業生2名が、企画・技術開発を担当したDJイベント。 当時のコロナウイルスの影響をものともせず、VRChatの特設ワールドにて開催しました！！<br />
最新の映像転送技術を応用し、オンライン上でも参加者全員に「楽しさ」の共有ができるように奮闘しました。</p>

<p>詳細は<a href="https://vr-ize.tumblr.com/">特設サイト</a>から。</p>]]></content><author><name>伊東拓(教授)</name></author><category term="blog" /><category term="DJ" /><category term="VRChat" /><category term="VRize" /><summary type="html"><![CDATA[本研究室の2020年度卒業生2名が、企画・技術開発を担当したDJイベント。 当時のコロナウイルスの影響をものともせず、VRChatの特設ワールドにて開催しました！！ 最新の映像転送技術を応用し、オンライン上でも参加者全員に「楽しさ」の共有ができるように奮闘しました。]]></summary></entry><entry><title type="html">シェーダー関連記事まとめ</title><link href="http://localhost:4000/blog/shader-list/" rel="alternate" type="text/html" title="シェーダー関連記事まとめ" /><published>2019-01-01T19:34:30+00:00</published><updated>2019-01-01T19:34:30+00:00</updated><id>http://localhost:4000/blog/shader-list</id><content type="html" xml:base="http://localhost:4000/blog/shader-list/"><![CDATA[<p>このページはシェーダに関する情報(GLSL, HLSL, ShaderLab..etc)を<del>きっといつか誰かが見てくれることを信じて</del>共有するためのものです。</p>

<h2 id="全般">全般</h2>
<ul>
  <li><a href="http://light11.hatenadiary.com/entry/2019/01/27/160541">シェーダのシェの字も知らない人はまずMVP行列について軽く学ぼう</a></li>
  <li><a href="https://amagamina.jp/no-if-range/">シェーダで条件分岐を使わないテクニック</a></li>
  <li><a href="https://www.slideshare.net/shohosoda9/threejs-58238484">シェーダーだけで創る世界・レイマーチングがすごい！</a></li>
</ul>

<h2 id="glsl">GLSL</h2>
<h2 id="hlsl">HLSL</h2>
<h2 id="unityshaderlab-cghlsl">Unity(ShaderLab, Cg/HLSL)</h2>
<ul>
  <li>(有償)<a href="https://booth.pm/ja/items/931290">Unity Shader Programming Vol.01</a></li>
  <li><a href="http://nn-hokuson.hatenablog.com/entry/2018/02/15/140037">1日でマスターするUnityシェーダ入門！！</a>　←初心者向き</li>
  <li><a href="https://youtu.be/9OP6s5RFNkQ">Shader Graphを使ってノンプログラミングでシェーダを作ろう！</a></li>
  <li><a href="https://setchi.hatenablog.com/entry/2017/12/19/221735">モバイルで10万個のオブジェクトを描画</a></li>
  <li><a href="http://esprog.hatenablog.com/entry/2016/03/06/135828">シェーダについてまとめられているスライド</a></li>
  <li><a href="http://tsumikiseisaku.com/blog/shader-tutorial-water/">リアルよりの水流の作り方を学べるチュートリアル</a></li>
</ul>

<p><strong>リアルよりの水流の作り方を学べるチュートリアルに関しては、同サイトの簡単なチュートリアルを先にやっておくことを推奨。ソースコードに一つ誤りがあり、RGBAのアルファを元にディスプレイスしているが上手く働かないのでRの値を用いるのをおすすめする。</strong></p>]]></content><author><name>平山湧也</name></author><category term="blog" /><category term="Shader" /><category term="HLSL" /><category term="GLSL" /><category term="Cg" /><category term="Unity" /><summary type="html"><![CDATA[このページはシェーダに関する情報(GLSL, HLSL, ShaderLab..etc)をきっといつか誰かが見てくれることを信じて共有するためのものです。 全般 シェーダのシェの字も知らない人はまずMVP行列について軽く学ぼう シェーダで条件分岐を使わないテクニック シェーダーだけで創る世界・レイマーチングがすごい！ GLSL HLSL Unity(ShaderLab, Cg/HLSL) (有償)Unity Shader Programming Vol.01 1日でマスターするUnityシェーダ入門！！　←初心者向き Shader Graphを使ってノンプログラミングでシェーダを作ろう！ モバイルで10万個のオブジェクトを描画 シェーダについてまとめられているスライド リアルよりの水流の作り方を学べるチュートリアル リアルよりの水流の作り方を学べるチュートリアルに関しては、同サイトの簡単なチュートリアルを先にやっておくことを推奨。ソースコードに一つ誤りがあり、RGBAのアルファを元にディスプレイスしているが上手く働かないのでRの値を用いるのをおすすめする。]]></summary></entry></feed>